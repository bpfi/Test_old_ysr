'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
'
Namespace WS1
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="BPF_WSSoap", [Namespace]:="http://tempuri.org/")>  _
    Partial Public Class BPF_WS
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private syncAreaOperationCompleted As System.Threading.SendOrPostCallback
        
        Private syncBranchOperationCompleted As System.Threading.SendOrPostCallback
        
        Private syncCMOOperationCompleted As System.Threading.SendOrPostCallback
        
        Private setBPF_DatasourceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private setTargetOperationCompleted As System.Threading.SendOrPostCallback
        
        Private removeAllTargetOperationCompleted As System.Threading.SendOrPostCallback
        
        Private deleteBPF_DatasourceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private syncDealerOperationCompleted As System.Threading.SendOrPostCallback
        
        Private syncCarOriginOperationCompleted As System.Threading.SendOrPostCallback
        
        Private syncCarTypeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private syncCarBrandOperationCompleted As System.Threading.SendOrPostCallback
        
        Private syncCarModelOperationCompleted As System.Threading.SendOrPostCallback
        
        Private syncCarModelTypeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private testOperationCompleted As System.Threading.SendOrPostCallback
        
        Private rebuildOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.Test.My.MySettings.Default.Test_WS1_BPF_WS
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event syncAreaCompleted As syncAreaCompletedEventHandler
        
        '''<remarks/>
        Public Event syncBranchCompleted As syncBranchCompletedEventHandler
        
        '''<remarks/>
        Public Event syncCMOCompleted As syncCMOCompletedEventHandler
        
        '''<remarks/>
        Public Event setBPF_DatasourceCompleted As setBPF_DatasourceCompletedEventHandler
        
        '''<remarks/>
        Public Event setTargetCompleted As setTargetCompletedEventHandler
        
        '''<remarks/>
        Public Event removeAllTargetCompleted As removeAllTargetCompletedEventHandler
        
        '''<remarks/>
        Public Event deleteBPF_DatasourceCompleted As deleteBPF_DatasourceCompletedEventHandler
        
        '''<remarks/>
        Public Event syncDealerCompleted As syncDealerCompletedEventHandler
        
        '''<remarks/>
        Public Event syncCarOriginCompleted As syncCarOriginCompletedEventHandler
        
        '''<remarks/>
        Public Event syncCarTypeCompleted As syncCarTypeCompletedEventHandler
        
        '''<remarks/>
        Public Event syncCarBrandCompleted As syncCarBrandCompletedEventHandler
        
        '''<remarks/>
        Public Event syncCarModelCompleted As syncCarModelCompletedEventHandler
        
        '''<remarks/>
        Public Event syncCarModelTypeCompleted As syncCarModelTypeCompletedEventHandler
        
        '''<remarks/>
        Public Event testCompleted As testCompletedEventHandler
        
        '''<remarks/>
        Public Event rebuildCompleted As rebuildCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/syncArea", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function syncArea(ByVal keyPass As String, ByVal areaId As String, ByVal areaName As String, ByVal areaManager As String, ByVal active As Boolean, ByVal IsNonOpr As Boolean) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("syncArea", New Object() {keyPass, areaId, areaName, areaManager, active, IsNonOpr})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub syncAreaAsync(ByVal keyPass As String, ByVal areaId As String, ByVal areaName As String, ByVal areaManager As String, ByVal active As Boolean, ByVal IsNonOpr As Boolean)
            Me.syncAreaAsync(keyPass, areaId, areaName, areaManager, active, IsNonOpr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub syncAreaAsync(ByVal keyPass As String, ByVal areaId As String, ByVal areaName As String, ByVal areaManager As String, ByVal active As Boolean, ByVal IsNonOpr As Boolean, ByVal userState As Object)
            If (Me.syncAreaOperationCompleted Is Nothing) Then
                Me.syncAreaOperationCompleted = AddressOf Me.OnsyncAreaOperationCompleted
            End If
            Me.InvokeAsync("syncArea", New Object() {keyPass, areaId, areaName, areaManager, active, IsNonOpr}, Me.syncAreaOperationCompleted, userState)
        End Sub
        
        Private Sub OnsyncAreaOperationCompleted(ByVal arg As Object)
            If (Not (Me.syncAreaCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent syncAreaCompleted(Me, New syncAreaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/syncBranch", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function syncBranch(ByVal keyPass As String, ByVal branchCode As String, ByVal branchName As String, ByVal alamat As String, ByVal notelp As String, ByVal areaId As String, ByVal branchManager As String, ByVal branchEmail As String, ByVal kota As String, ByVal active As Boolean, ByVal adminEmail As String, ByVal SurveyFee As Double, ByVal IsDemo As Boolean, ByVal IsNonOpr As Boolean) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("syncBranch", New Object() {keyPass, branchCode, branchName, alamat, notelp, areaId, branchManager, branchEmail, kota, active, adminEmail, SurveyFee, IsDemo, IsNonOpr})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub syncBranchAsync(ByVal keyPass As String, ByVal branchCode As String, ByVal branchName As String, ByVal alamat As String, ByVal notelp As String, ByVal areaId As String, ByVal branchManager As String, ByVal branchEmail As String, ByVal kota As String, ByVal active As Boolean, ByVal adminEmail As String, ByVal SurveyFee As Double, ByVal IsDemo As Boolean, ByVal IsNonOpr As Boolean)
            Me.syncBranchAsync(keyPass, branchCode, branchName, alamat, notelp, areaId, branchManager, branchEmail, kota, active, adminEmail, SurveyFee, IsDemo, IsNonOpr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub syncBranchAsync(ByVal keyPass As String, ByVal branchCode As String, ByVal branchName As String, ByVal alamat As String, ByVal notelp As String, ByVal areaId As String, ByVal branchManager As String, ByVal branchEmail As String, ByVal kota As String, ByVal active As Boolean, ByVal adminEmail As String, ByVal SurveyFee As Double, ByVal IsDemo As Boolean, ByVal IsNonOpr As Boolean, ByVal userState As Object)
            If (Me.syncBranchOperationCompleted Is Nothing) Then
                Me.syncBranchOperationCompleted = AddressOf Me.OnsyncBranchOperationCompleted
            End If
            Me.InvokeAsync("syncBranch", New Object() {keyPass, branchCode, branchName, alamat, notelp, areaId, branchManager, branchEmail, kota, active, adminEmail, SurveyFee, IsDemo, IsNonOpr}, Me.syncBranchOperationCompleted, userState)
        End Sub
        
        Private Sub OnsyncBranchOperationCompleted(ByVal arg As Object)
            If (Not (Me.syncBranchCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent syncBranchCompleted(Me, New syncBranchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/syncCMO", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function syncCMO(ByVal keyPass As String, ByVal cmoCode As String, ByVal cmoName As String, ByVal cmoEmail As String, ByVal branchCode As String, ByVal branchName As String, ByVal areaId As String, ByVal branchManager As String, ByVal branchEmail As String, ByVal adminEmail As String, ByVal branchActive As Boolean, ByVal cmoActive As Boolean, ByVal telp As String, ByVal IsNonOpr As Boolean) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("syncCMO", New Object() {keyPass, cmoCode, cmoName, cmoEmail, branchCode, branchName, areaId, branchManager, branchEmail, adminEmail, branchActive, cmoActive, telp, IsNonOpr})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub syncCMOAsync(ByVal keyPass As String, ByVal cmoCode As String, ByVal cmoName As String, ByVal cmoEmail As String, ByVal branchCode As String, ByVal branchName As String, ByVal areaId As String, ByVal branchManager As String, ByVal branchEmail As String, ByVal adminEmail As String, ByVal branchActive As Boolean, ByVal cmoActive As Boolean, ByVal telp As String, ByVal IsNonOpr As Boolean)
            Me.syncCMOAsync(keyPass, cmoCode, cmoName, cmoEmail, branchCode, branchName, areaId, branchManager, branchEmail, adminEmail, branchActive, cmoActive, telp, IsNonOpr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub syncCMOAsync(ByVal keyPass As String, ByVal cmoCode As String, ByVal cmoName As String, ByVal cmoEmail As String, ByVal branchCode As String, ByVal branchName As String, ByVal areaId As String, ByVal branchManager As String, ByVal branchEmail As String, ByVal adminEmail As String, ByVal branchActive As Boolean, ByVal cmoActive As Boolean, ByVal telp As String, ByVal IsNonOpr As Boolean, ByVal userState As Object)
            If (Me.syncCMOOperationCompleted Is Nothing) Then
                Me.syncCMOOperationCompleted = AddressOf Me.OnsyncCMOOperationCompleted
            End If
            Me.InvokeAsync("syncCMO", New Object() {keyPass, cmoCode, cmoName, cmoEmail, branchCode, branchName, areaId, branchManager, branchEmail, adminEmail, branchActive, cmoActive, telp, IsNonOpr}, Me.syncCMOOperationCompleted, userState)
        End Sub
        
        Private Sub OnsyncCMOOperationCompleted(ByVal arg As Object)
            If (Not (Me.syncCMOCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent syncCMOCompleted(Me, New syncCMOCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/setBPF_Datasource", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function setBPF_Datasource( _
                    ByVal trDate As Date,  _
                    ByVal areaCode As String,  _
                    ByVal branchCode As String,  _
                    ByVal cmoCode As String,  _
                    ByVal Collected As Double,  _
                    ByVal OPEX As Double,  _
                    ByVal AYDA As Double,  _
                    ByVal PL As Double,  _
                    ByVal keyPass As String,  _
                    ByVal osAR As Double,  _
                    ByVal osAR60 As Double,  _
                    ByVal interestIncome As Double,  _
                    ByVal opexvsOSAR As Double,  _
                    ByVal osAR60vsOSAR As Double,  _
                    ByVal interestIncomevsOSAR As Double,  _
                    ByVal totalSales As Double,  _
                    ByVal opexvsOSAR_Area As Double,  _
                    ByVal osAR60vsOSAR_Area As Double,  _
                    ByVal interestIncomevsOSAR_Area As Double) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("setBPF_Datasource", New Object() {trDate, areaCode, branchCode, cmoCode, Collected, OPEX, AYDA, PL, keyPass, osAR, osAR60, interestIncome, opexvsOSAR, osAR60vsOSAR, interestIncomevsOSAR, totalSales, opexvsOSAR_Area, osAR60vsOSAR_Area, interestIncomevsOSAR_Area})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub setBPF_DatasourceAsync( _
                    ByVal trDate As Date,  _
                    ByVal areaCode As String,  _
                    ByVal branchCode As String,  _
                    ByVal cmoCode As String,  _
                    ByVal Collected As Double,  _
                    ByVal OPEX As Double,  _
                    ByVal AYDA As Double,  _
                    ByVal PL As Double,  _
                    ByVal keyPass As String,  _
                    ByVal osAR As Double,  _
                    ByVal osAR60 As Double,  _
                    ByVal interestIncome As Double,  _
                    ByVal opexvsOSAR As Double,  _
                    ByVal osAR60vsOSAR As Double,  _
                    ByVal interestIncomevsOSAR As Double,  _
                    ByVal totalSales As Double,  _
                    ByVal opexvsOSAR_Area As Double,  _
                    ByVal osAR60vsOSAR_Area As Double,  _
                    ByVal interestIncomevsOSAR_Area As Double)
            Me.setBPF_DatasourceAsync(trDate, areaCode, branchCode, cmoCode, Collected, OPEX, AYDA, PL, keyPass, osAR, osAR60, interestIncome, opexvsOSAR, osAR60vsOSAR, interestIncomevsOSAR, totalSales, opexvsOSAR_Area, osAR60vsOSAR_Area, interestIncomevsOSAR_Area, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub setBPF_DatasourceAsync( _
                    ByVal trDate As Date,  _
                    ByVal areaCode As String,  _
                    ByVal branchCode As String,  _
                    ByVal cmoCode As String,  _
                    ByVal Collected As Double,  _
                    ByVal OPEX As Double,  _
                    ByVal AYDA As Double,  _
                    ByVal PL As Double,  _
                    ByVal keyPass As String,  _
                    ByVal osAR As Double,  _
                    ByVal osAR60 As Double,  _
                    ByVal interestIncome As Double,  _
                    ByVal opexvsOSAR As Double,  _
                    ByVal osAR60vsOSAR As Double,  _
                    ByVal interestIncomevsOSAR As Double,  _
                    ByVal totalSales As Double,  _
                    ByVal opexvsOSAR_Area As Double,  _
                    ByVal osAR60vsOSAR_Area As Double,  _
                    ByVal interestIncomevsOSAR_Area As Double,  _
                    ByVal userState As Object)
            If (Me.setBPF_DatasourceOperationCompleted Is Nothing) Then
                Me.setBPF_DatasourceOperationCompleted = AddressOf Me.OnsetBPF_DatasourceOperationCompleted
            End If
            Me.InvokeAsync("setBPF_Datasource", New Object() {trDate, areaCode, branchCode, cmoCode, Collected, OPEX, AYDA, PL, keyPass, osAR, osAR60, interestIncome, opexvsOSAR, osAR60vsOSAR, interestIncomevsOSAR, totalSales, opexvsOSAR_Area, osAR60vsOSAR_Area, interestIncomevsOSAR_Area}, Me.setBPF_DatasourceOperationCompleted, userState)
        End Sub
        
        Private Sub OnsetBPF_DatasourceOperationCompleted(ByVal arg As Object)
            If (Not (Me.setBPF_DatasourceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent setBPF_DatasourceCompleted(Me, New setBPF_DatasourceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/setTarget", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function setTarget(ByVal tahun As String, ByVal bulan As String, ByVal areaCode As String, ByVal branchCode As String, ByVal cmoCode As String, ByVal targetAmount As Double, ByVal targetNumApp As Integer, ByVal targetNumApprovedApp As Integer, ByVal keyPass As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("setTarget", New Object() {tahun, bulan, areaCode, branchCode, cmoCode, targetAmount, targetNumApp, targetNumApprovedApp, keyPass})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub setTargetAsync(ByVal tahun As String, ByVal bulan As String, ByVal areaCode As String, ByVal branchCode As String, ByVal cmoCode As String, ByVal targetAmount As Double, ByVal targetNumApp As Integer, ByVal targetNumApprovedApp As Integer, ByVal keyPass As String)
            Me.setTargetAsync(tahun, bulan, areaCode, branchCode, cmoCode, targetAmount, targetNumApp, targetNumApprovedApp, keyPass, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub setTargetAsync(ByVal tahun As String, ByVal bulan As String, ByVal areaCode As String, ByVal branchCode As String, ByVal cmoCode As String, ByVal targetAmount As Double, ByVal targetNumApp As Integer, ByVal targetNumApprovedApp As Integer, ByVal keyPass As String, ByVal userState As Object)
            If (Me.setTargetOperationCompleted Is Nothing) Then
                Me.setTargetOperationCompleted = AddressOf Me.OnsetTargetOperationCompleted
            End If
            Me.InvokeAsync("setTarget", New Object() {tahun, bulan, areaCode, branchCode, cmoCode, targetAmount, targetNumApp, targetNumApprovedApp, keyPass}, Me.setTargetOperationCompleted, userState)
        End Sub
        
        Private Sub OnsetTargetOperationCompleted(ByVal arg As Object)
            If (Not (Me.setTargetCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent setTargetCompleted(Me, New setTargetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/removeAllTarget", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function removeAllTarget(ByVal tahun As String, ByVal keyPass As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("removeAllTarget", New Object() {tahun, keyPass})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub removeAllTargetAsync(ByVal tahun As String, ByVal keyPass As String)
            Me.removeAllTargetAsync(tahun, keyPass, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub removeAllTargetAsync(ByVal tahun As String, ByVal keyPass As String, ByVal userState As Object)
            If (Me.removeAllTargetOperationCompleted Is Nothing) Then
                Me.removeAllTargetOperationCompleted = AddressOf Me.OnremoveAllTargetOperationCompleted
            End If
            Me.InvokeAsync("removeAllTarget", New Object() {tahun, keyPass}, Me.removeAllTargetOperationCompleted, userState)
        End Sub
        
        Private Sub OnremoveAllTargetOperationCompleted(ByVal arg As Object)
            If (Not (Me.removeAllTargetCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent removeAllTargetCompleted(Me, New removeAllTargetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/deleteBPF_Datasource", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function deleteBPF_Datasource(ByVal tahun As String, ByVal bulan As String, ByVal keypass As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("deleteBPF_Datasource", New Object() {tahun, bulan, keypass})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub deleteBPF_DatasourceAsync(ByVal tahun As String, ByVal bulan As String, ByVal keypass As String)
            Me.deleteBPF_DatasourceAsync(tahun, bulan, keypass, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub deleteBPF_DatasourceAsync(ByVal tahun As String, ByVal bulan As String, ByVal keypass As String, ByVal userState As Object)
            If (Me.deleteBPF_DatasourceOperationCompleted Is Nothing) Then
                Me.deleteBPF_DatasourceOperationCompleted = AddressOf Me.OndeleteBPF_DatasourceOperationCompleted
            End If
            Me.InvokeAsync("deleteBPF_Datasource", New Object() {tahun, bulan, keypass}, Me.deleteBPF_DatasourceOperationCompleted, userState)
        End Sub
        
        Private Sub OndeleteBPF_DatasourceOperationCompleted(ByVal arg As Object)
            If (Not (Me.deleteBPF_DatasourceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent deleteBPF_DatasourceCompleted(Me, New deleteBPF_DatasourceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/syncDealer", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function syncDealer(ByVal keyPass As String, ByVal dealerCode As String, ByVal dealerName As String, ByVal dealerEmail As String, ByVal dealerActive As Boolean) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("syncDealer", New Object() {keyPass, dealerCode, dealerName, dealerEmail, dealerActive})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub syncDealerAsync(ByVal keyPass As String, ByVal dealerCode As String, ByVal dealerName As String, ByVal dealerEmail As String, ByVal dealerActive As Boolean)
            Me.syncDealerAsync(keyPass, dealerCode, dealerName, dealerEmail, dealerActive, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub syncDealerAsync(ByVal keyPass As String, ByVal dealerCode As String, ByVal dealerName As String, ByVal dealerEmail As String, ByVal dealerActive As Boolean, ByVal userState As Object)
            If (Me.syncDealerOperationCompleted Is Nothing) Then
                Me.syncDealerOperationCompleted = AddressOf Me.OnsyncDealerOperationCompleted
            End If
            Me.InvokeAsync("syncDealer", New Object() {keyPass, dealerCode, dealerName, dealerEmail, dealerActive}, Me.syncDealerOperationCompleted, userState)
        End Sub
        
        Private Sub OnsyncDealerOperationCompleted(ByVal arg As Object)
            If (Not (Me.syncDealerCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent syncDealerCompleted(Me, New syncDealerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/syncCarOrigin", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function syncCarOrigin(ByVal keyPass As String, ByVal carOriginName As String, ByVal carOriginActive As Boolean, ByVal carOriginAssetCode As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("syncCarOrigin", New Object() {keyPass, carOriginName, carOriginActive, carOriginAssetCode})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub syncCarOriginAsync(ByVal keyPass As String, ByVal carOriginName As String, ByVal carOriginActive As Boolean, ByVal carOriginAssetCode As String)
            Me.syncCarOriginAsync(keyPass, carOriginName, carOriginActive, carOriginAssetCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub syncCarOriginAsync(ByVal keyPass As String, ByVal carOriginName As String, ByVal carOriginActive As Boolean, ByVal carOriginAssetCode As String, ByVal userState As Object)
            If (Me.syncCarOriginOperationCompleted Is Nothing) Then
                Me.syncCarOriginOperationCompleted = AddressOf Me.OnsyncCarOriginOperationCompleted
            End If
            Me.InvokeAsync("syncCarOrigin", New Object() {keyPass, carOriginName, carOriginActive, carOriginAssetCode}, Me.syncCarOriginOperationCompleted, userState)
        End Sub
        
        Private Sub OnsyncCarOriginOperationCompleted(ByVal arg As Object)
            If (Not (Me.syncCarOriginCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent syncCarOriginCompleted(Me, New syncCarOriginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/syncCarType", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function syncCarType(ByVal keyPass As String, ByVal carTypeName As String, ByVal carTypeActive As Boolean, ByVal allowNoInsurance As Boolean, ByVal carTypeAssetCode As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("syncCarType", New Object() {keyPass, carTypeName, carTypeActive, allowNoInsurance, carTypeAssetCode})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub syncCarTypeAsync(ByVal keyPass As String, ByVal carTypeName As String, ByVal carTypeActive As Boolean, ByVal allowNoInsurance As Boolean, ByVal carTypeAssetCode As String)
            Me.syncCarTypeAsync(keyPass, carTypeName, carTypeActive, allowNoInsurance, carTypeAssetCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub syncCarTypeAsync(ByVal keyPass As String, ByVal carTypeName As String, ByVal carTypeActive As Boolean, ByVal allowNoInsurance As Boolean, ByVal carTypeAssetCode As String, ByVal userState As Object)
            If (Me.syncCarTypeOperationCompleted Is Nothing) Then
                Me.syncCarTypeOperationCompleted = AddressOf Me.OnsyncCarTypeOperationCompleted
            End If
            Me.InvokeAsync("syncCarType", New Object() {keyPass, carTypeName, carTypeActive, allowNoInsurance, carTypeAssetCode}, Me.syncCarTypeOperationCompleted, userState)
        End Sub
        
        Private Sub OnsyncCarTypeOperationCompleted(ByVal arg As Object)
            If (Not (Me.syncCarTypeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent syncCarTypeCompleted(Me, New syncCarTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/syncCarBrand", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function syncCarBrand(ByVal keyPass As String, ByVal carOriginAssetCode As String, ByVal carBrandName As String, ByVal carBrandActive As Boolean, ByVal carBrandAssetCode As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("syncCarBrand", New Object() {keyPass, carOriginAssetCode, carBrandName, carBrandActive, carBrandAssetCode})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub syncCarBrandAsync(ByVal keyPass As String, ByVal carOriginAssetCode As String, ByVal carBrandName As String, ByVal carBrandActive As Boolean, ByVal carBrandAssetCode As String)
            Me.syncCarBrandAsync(keyPass, carOriginAssetCode, carBrandName, carBrandActive, carBrandAssetCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub syncCarBrandAsync(ByVal keyPass As String, ByVal carOriginAssetCode As String, ByVal carBrandName As String, ByVal carBrandActive As Boolean, ByVal carBrandAssetCode As String, ByVal userState As Object)
            If (Me.syncCarBrandOperationCompleted Is Nothing) Then
                Me.syncCarBrandOperationCompleted = AddressOf Me.OnsyncCarBrandOperationCompleted
            End If
            Me.InvokeAsync("syncCarBrand", New Object() {keyPass, carOriginAssetCode, carBrandName, carBrandActive, carBrandAssetCode}, Me.syncCarBrandOperationCompleted, userState)
        End Sub
        
        Private Sub OnsyncCarBrandOperationCompleted(ByVal arg As Object)
            If (Not (Me.syncCarBrandCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent syncCarBrandCompleted(Me, New syncCarBrandCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/syncCarModel", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function syncCarModel(ByVal keyPass As String, ByVal carBrandAssetCode As String, ByVal carModelAssetCode As String, ByVal carModelName As String, ByVal carModelActive As Boolean) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("syncCarModel", New Object() {keyPass, carBrandAssetCode, carModelAssetCode, carModelName, carModelActive})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub syncCarModelAsync(ByVal keyPass As String, ByVal carBrandAssetCode As String, ByVal carModelAssetCode As String, ByVal carModelName As String, ByVal carModelActive As Boolean)
            Me.syncCarModelAsync(keyPass, carBrandAssetCode, carModelAssetCode, carModelName, carModelActive, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub syncCarModelAsync(ByVal keyPass As String, ByVal carBrandAssetCode As String, ByVal carModelAssetCode As String, ByVal carModelName As String, ByVal carModelActive As Boolean, ByVal userState As Object)
            If (Me.syncCarModelOperationCompleted Is Nothing) Then
                Me.syncCarModelOperationCompleted = AddressOf Me.OnsyncCarModelOperationCompleted
            End If
            Me.InvokeAsync("syncCarModel", New Object() {keyPass, carBrandAssetCode, carModelAssetCode, carModelName, carModelActive}, Me.syncCarModelOperationCompleted, userState)
        End Sub
        
        Private Sub OnsyncCarModelOperationCompleted(ByVal arg As Object)
            If (Not (Me.syncCarModelCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent syncCarModelCompleted(Me, New syncCarModelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/syncCarModelType", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function syncCarModelType(ByVal keyPass As String, ByVal carModelAssetCode As String, ByVal carTypeAssetCode As String, ByVal carModelTypeAssetCode As String, ByVal carModelTypeName As String, ByVal carModelTypeActive As Boolean) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("syncCarModelType", New Object() {keyPass, carModelAssetCode, carTypeAssetCode, carModelTypeAssetCode, carModelTypeName, carModelTypeActive})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub syncCarModelTypeAsync(ByVal keyPass As String, ByVal carModelAssetCode As String, ByVal carTypeAssetCode As String, ByVal carModelTypeAssetCode As String, ByVal carModelTypeName As String, ByVal carModelTypeActive As Boolean)
            Me.syncCarModelTypeAsync(keyPass, carModelAssetCode, carTypeAssetCode, carModelTypeAssetCode, carModelTypeName, carModelTypeActive, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub syncCarModelTypeAsync(ByVal keyPass As String, ByVal carModelAssetCode As String, ByVal carTypeAssetCode As String, ByVal carModelTypeAssetCode As String, ByVal carModelTypeName As String, ByVal carModelTypeActive As Boolean, ByVal userState As Object)
            If (Me.syncCarModelTypeOperationCompleted Is Nothing) Then
                Me.syncCarModelTypeOperationCompleted = AddressOf Me.OnsyncCarModelTypeOperationCompleted
            End If
            Me.InvokeAsync("syncCarModelType", New Object() {keyPass, carModelAssetCode, carTypeAssetCode, carModelTypeAssetCode, carModelTypeName, carModelTypeActive}, Me.syncCarModelTypeOperationCompleted, userState)
        End Sub
        
        Private Sub OnsyncCarModelTypeOperationCompleted(ByVal arg As Object)
            If (Not (Me.syncCarModelTypeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent syncCarModelTypeCompleted(Me, New syncCarModelTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/test", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub test()
            Me.Invoke("test", New Object(-1) {})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub testAsync()
            Me.testAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub testAsync(ByVal userState As Object)
            If (Me.testOperationCompleted Is Nothing) Then
                Me.testOperationCompleted = AddressOf Me.OntestOperationCompleted
            End If
            Me.InvokeAsync("test", New Object(-1) {}, Me.testOperationCompleted, userState)
        End Sub
        
        Private Sub OntestOperationCompleted(ByVal arg As Object)
            If (Not (Me.testCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent testCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/rebuild", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub rebuild(ByVal keyPass As String)
            Me.Invoke("rebuild", New Object() {keyPass})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub rebuildAsync(ByVal keyPass As String)
            Me.rebuildAsync(keyPass, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub rebuildAsync(ByVal keyPass As String, ByVal userState As Object)
            If (Me.rebuildOperationCompleted Is Nothing) Then
                Me.rebuildOperationCompleted = AddressOf Me.OnrebuildOperationCompleted
            End If
            Me.InvokeAsync("rebuild", New Object() {keyPass}, Me.rebuildOperationCompleted, userState)
        End Sub
        
        Private Sub OnrebuildOperationCompleted(ByVal arg As Object)
            If (Not (Me.rebuildCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent rebuildCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub syncAreaCompletedEventHandler(ByVal sender As Object, ByVal e As syncAreaCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class syncAreaCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub syncBranchCompletedEventHandler(ByVal sender As Object, ByVal e As syncBranchCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class syncBranchCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub syncCMOCompletedEventHandler(ByVal sender As Object, ByVal e As syncCMOCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class syncCMOCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub setBPF_DatasourceCompletedEventHandler(ByVal sender As Object, ByVal e As setBPF_DatasourceCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class setBPF_DatasourceCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub setTargetCompletedEventHandler(ByVal sender As Object, ByVal e As setTargetCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class setTargetCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub removeAllTargetCompletedEventHandler(ByVal sender As Object, ByVal e As removeAllTargetCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class removeAllTargetCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub deleteBPF_DatasourceCompletedEventHandler(ByVal sender As Object, ByVal e As deleteBPF_DatasourceCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class deleteBPF_DatasourceCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub syncDealerCompletedEventHandler(ByVal sender As Object, ByVal e As syncDealerCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class syncDealerCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub syncCarOriginCompletedEventHandler(ByVal sender As Object, ByVal e As syncCarOriginCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class syncCarOriginCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub syncCarTypeCompletedEventHandler(ByVal sender As Object, ByVal e As syncCarTypeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class syncCarTypeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub syncCarBrandCompletedEventHandler(ByVal sender As Object, ByVal e As syncCarBrandCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class syncCarBrandCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub syncCarModelCompletedEventHandler(ByVal sender As Object, ByVal e As syncCarModelCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class syncCarModelCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub syncCarModelTypeCompletedEventHandler(ByVal sender As Object, ByVal e As syncCarModelTypeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class syncCarModelTypeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub testCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")>  _
    Public Delegate Sub rebuildCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
End Namespace
